<?php


namespace Pinepain\SimpleConfig\Tests\Loaders;

use org\bovigo\vfs\vfsStream;
use PHPUnit_Framework_MockObject_Invocation;
use Pinepain\SimpleConfig\Loaders\FilesLoader;
use Pinepain\SimpleConfig\Loaders\MergedFilesLoader;


class MergedFilesLoaderTest extends \PHPUnit_Framework_TestCase
{
    private $root;

    protected function setUp()
    {
        parent::setUp();

        $structure = [
            'merge_expected.php' => "<?php

// THIS IS AUTOGENERATED FILE! DO NOT EDIT IT!

return array('test1' => array('test 1 items here'), 'test2' => array('test 2 items here'));
",
            'merge.php' => "<?php return ['test items here'];",
            'test1.php' => "<?php return ['test 1 items here'];",
            'test2.php' => "<?php return ['test 2 items here'];",

            'test_failure.php' => "<?php \$a = 1+1; return [\$a, (\$a)*2, 'xxx'];",
        ];

        $this->root = vfsStream::setup('root', null, $structure);
    }

    public function testGenerateMerge()
    {
        /** @var MergedFilesLoader | \PHPUnit_Framework_MockObject_MockObject $loader */
        $loader = $this->getMockBuilder('\Pinepain\SimpleConfig\Loaders\MergedFilesLoader')
            ->setMethods(null)
            ->disableOriginalConstructor()
            ->getMock();

        $source_files = [
            'test1' => vfsStream::url('root/test1.php'),
            'test2' => vfsStream::url('root/test2.php'),
        ];

        $loader->generateMerge(vfsStream::url('root/merge_test.php'), $source_files);

        $this->assertFileEquals(vfsStream::url('root/merge_expected.php'), vfsStream::url('root/merge_test.php'));
    }

    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Unable to locate return statement with config items in vfs://root/test_failure.php
     */
    public function testGenerateMergeFailure()
    {
        /** @var MergedFilesLoader | \PHPUnit_Framework_MockObject_MockObject $loader */
        $loader = $this->getMockBuilder('\Pinepain\SimpleConfig\Loaders\MergedFilesLoader')
            ->setMethods(null)
            ->disableOriginalConstructor()
            ->getMock();

        $source_files = [
            'test_failure' => vfsStream::url('root/test_failure.php'),
        ];

        $loader->generateMerge(vfsStream::url('root/merge_test.php'), $source_files);
    }

    public function testLoadMerged()
    {
        /** @var FilesLoader | \PHPUnit_Framework_MockObject_MockObject $files_loader */
        $files_loader = $this->getMockBuilder('\Pinepain\SimpleConfig\Loaders\FilesLoader')
            ->disableOriginalConstructor()
            ->getMock();

        /** @var MergedFilesLoader | \PHPUnit_Framework_MockObject_MockObject $loader */
        $loader = $this->getMockBuilder('\Pinepain\SimpleConfig\Loaders\MergedFilesLoader')
            ->setMethods(['generateMerge'])
            ->setConstructorArgs([$files_loader, vfsStream::url('root/merge.php')])
            ->getMock();

        $loader->expects($this->never())
            ->method('generateMerge');

        $expected = ['test items here'];

        $this->assertSame($expected, $loader->load());
    }

    public function testLoadWithMergeGeneration()
    {
        $merge_file_test = vfsStream::url('root/merge.php');

        $merge_file = vfsStream::url('root/merge_nonexistent.php');
        $config_dir = 'directory to look for configs in';
        $config_files = ['basename' => 'file path'];

        /** @var FilesLoader | \PHPUnit_Framework_MockObject_MockObject $files_loader */
        $files_loader = $this->getMockBuilder('\Pinepain\SimpleConfig\Loaders\FilesLoader')
            ->setMethods(['getDirectory', 'getConfigFiles'])
            ->disableOriginalConstructor()
            ->getMock();

        $files_loader->expects($this->once())
            ->method('getDirectory')
            ->willReturn($config_dir);

        $files_loader->expects($this->once())
            ->method('getConfigFiles')
            ->with($config_dir)
            ->willReturn($config_files);

        /** @var MergedFilesLoader | \PHPUnit_Framework_MockObject_MockObject $loader */
        $loader = $this->getMockBuilder('\Pinepain\SimpleConfig\Loaders\MergedFilesLoader')
            ->setMethods(['generateMerge'])
            ->setConstructorArgs([$files_loader, $merge_file])
            ->getMock();

        // here we suggest that `generateMerge` method generates merge file which later will be `require`d
        $loader->expects($this->once())
            ->method('generateMerge')
            ->with($merge_file, $config_files)
            ->will($this->returnCallback(function () use ($merge_file, $merge_file_test){
                copy($merge_file_test, $merge_file);
            }));

        $expected = ['test items here'];

        $this->assertSame($expected, $loader->load());
    }
}
